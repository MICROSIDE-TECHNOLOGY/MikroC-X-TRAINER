;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14/10/2021 12:38:02 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF010EF00  	GOTO        8192
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_main:
;Keypad.c,75 :: 		void main ()org 0x2000       //Vector de inicio usando el bootloader de Microside
;Keypad.c,79 :: 		LATA1_bit = 0;              //Escribe ceros en el puerto A1
0x2000	0x9289      	BCF         LATA1_bit, BitPos(LATA1_bit+0) 
;Keypad.c,80 :: 		TRISA1_bit = 0;             //Se declara el puerto A1 como salida
0x2002	0x9292      	BCF         TRISA1_bit, BitPos(TRISA1_bit+0) 
;Keypad.c,84 :: 		Keypad_Init ();             //Se manda a instanciar la libería para el teclado matricial
0x2004	0xD84A      	RCALL       _Keypad_Init
;Keypad.c,85 :: 		getKey ();                  //Se manda a instanciar la función que contiene todos los cases
0x2006	0xD856      	RCALL       _getKey
;Keypad.c,86 :: 		while (1)                   //Mientras sea verdadero se ejecuta el bucle infinitamente
L_main19:
;Keypad.c,88 :: 		key = getKey ();           //Se manda a asignar la función a una variable para su uso
0x2008	0xD855      	RCALL       _getKey
0x200A	0xF015C000  	MOVFF       R0, _key
;Keypad.c,89 :: 		if (key == '1')            //Si key es igual a la condición entre comillas
0x200E	0x5000      	MOVF        R0, 0 
0x2010	0x0A31      	XORLW       49
0x2012	0xE102      	BNZ         L_main21
;Keypad.c,91 :: 		Led_On;                   //Led enciende
0x2014	0x8889      	BSF         LATA4_bit, BitPos(LATA4_bit+0) 
;Keypad.c,92 :: 		}
0x2016	0xD004      	BRA         L_main22
L_main21:
;Keypad.c,94 :: 		else if (key == '0')       //Si no es igual key a la condición entre comillas
0x2018	0x5015      	MOVF        _key, 0 
0x201A	0x0A30      	XORLW       48
0x201C	0xB4D8      	BTFSC       STATUS, 2 
;Keypad.c,96 :: 		Led_Off;                  //Led se apaga
0x201E	0x9889      	BCF         LATA4_bit, BitPos(LATA4_bit+0) 
;Keypad.c,97 :: 		}
L_main23:
L_main22:
;Keypad.c,98 :: 		}
0x2020	0xD7F3      	BRA         L_main19
;Keypad.c,99 :: 		}
L_end_main:
0x2022	0xD7FF      	BRA         $+0
; end of _main
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x2024	0x0E03      	MOVLW       3
0x2026	0x6E0D      	MOVWF       R13, 0
L_Delay_1us0:
0x2028	0x2E0D      	DECFSZ      R13, 1, 0
0x202A	0xD7FE      	BRA         L_Delay_1us0
0x202C	0x0000      	NOP
0x202E	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x2030	0x0012      	RETURN      0
; end of _Delay_1us
_Keypad_Key_Press:
;__Lib_Keypad4x4.c,39 :: 		
;__Lib_Keypad4x4.c,43 :: 		
0x2032	0x6A17      	CLRF        Keypad_Key_Press_rslt_L0 
;__Lib_Keypad4x4.c,44 :: 		
0x2034	0x6A19      	CLRF        Keypad_Key_Press_loc_L0 
;__Lib_Keypad4x4.c,45 :: 		
0x2036	0x6A1A      	CLRF        Keypad_Key_Press_rowcnt_L0 
;__Lib_Keypad4x4.c,46 :: 		
0x2038	0x0E10      	MOVLW       16
0x203A	0x6E1B      	MOVWF       Keypad_Key_Press_shifter_L0 
;__Lib_Keypad4x4.c,48 :: 		
L_Keypad_Key_Press0:
0x203C	0x0E04      	MOVLW       4
0x203E	0x5C1A      	SUBWF       Keypad_Key_Press_rowcnt_L0, 0 
0x2040	0xE229      	BC          L_Keypad_Key_Press1
;__Lib_Keypad4x4.c,50 :: 		
0x2042	0x0EF0      	MOVLW       240
0x2044	0x6E81      	MOVWF       keypadPort 
;__Lib_Keypad4x4.c,51 :: 		
0x2046	0x0E12      	MOVLW       18
0x2048	0x6E00      	MOVWF       R0 
0x204A	0x0E00      	MOVLW       0
0x204C	0x6E01      	MOVWF       R1 
0x204E	0x0E81      	MOVLW       keypadPort
0x2050	0x2400      	ADDWF       R0, 0 
0x2052	0x6EE1      	MOVWF       FSR1L 
0x2054	0x0E0F      	MOVLW       hi_addr(keypadPort)
0x2056	0x2001      	ADDWFC      R1, 0 
0x2058	0x6EE2      	MOVWF       FSR1L+1 
0x205A	0x1C1B      	COMF        Keypad_Key_Press_shifter_L0, 0 
0x205C	0x6E00      	MOVWF       R0 
0x205E	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Keypad4x4.c,55 :: 		
0x2062	0xDFE0      	RCALL       _Delay_1us
;__Lib_Keypad4x4.c,56 :: 		
0x2064	0xDFDF      	RCALL       _Delay_1us
;__Lib_Keypad4x4.c,57 :: 		
0x2066	0x0E0F      	MOVLW       15
0x2068	0x1481      	ANDWF       keypadPort, 0 
0x206A	0x6E00      	MOVWF       R0 
0x206C	0xF018C000  	MOVFF       R0, Keypad_Key_Press_kdata_L0
;__Lib_Keypad4x4.c,58 :: 		
0x2070	0x5200      	MOVF        R0, 1 
0x2072	0xE00A      	BZ          L_Keypad_Key_Press2
;__Lib_Keypad4x4.c,60 :: 		
0x2074	0xF017C019  	MOVFF       Keypad_Key_Press_loc_L0, Keypad_Key_Press_rslt_L0
;__Lib_Keypad4x4.c,61 :: 		
L_Keypad_Key_Press3:
0x2078	0x5218      	MOVF        Keypad_Key_Press_kdata_L0, 1 
0x207A	0xE004      	BZ          L_Keypad_Key_Press4
;__Lib_Keypad4x4.c,62 :: 		
0x207C	0x3218      	RRCF        Keypad_Key_Press_kdata_L0, 1 
0x207E	0x9E18      	BCF         Keypad_Key_Press_kdata_L0, 7 
;__Lib_Keypad4x4.c,63 :: 		
0x2080	0x2A17      	INCF        Keypad_Key_Press_rslt_L0, 1 
;__Lib_Keypad4x4.c,64 :: 		
0x2082	0xD7FA      	BRA         L_Keypad_Key_Press3
L_Keypad_Key_Press4:
;__Lib_Keypad4x4.c,66 :: 		
0x2084	0x0E04      	MOVLW       4
0x2086	0x6E1A      	MOVWF       Keypad_Key_Press_rowcnt_L0 
;__Lib_Keypad4x4.c,67 :: 		
L_Keypad_Key_Press2:
;__Lib_Keypad4x4.c,68 :: 		
0x2088	0x361B      	RLCF        Keypad_Key_Press_shifter_L0, 1 
0x208A	0x901B      	BCF         Keypad_Key_Press_shifter_L0, 0 
;__Lib_Keypad4x4.c,69 :: 		
0x208C	0x0E04      	MOVLW       4
0x208E	0x2619      	ADDWF       Keypad_Key_Press_loc_L0, 1 
;__Lib_Keypad4x4.c,70 :: 		
0x2090	0x2A1A      	INCF        Keypad_Key_Press_rowcnt_L0, 1 
;__Lib_Keypad4x4.c,71 :: 		
0x2092	0xD7D4      	BRA         L_Keypad_Key_Press0
L_Keypad_Key_Press1:
;__Lib_Keypad4x4.c,73 :: 		
0x2094	0xF000C017  	MOVFF       Keypad_Key_Press_rslt_L0, R0
;__Lib_Keypad4x4.c,74 :: 		
L_end_Keypad_Key_Press:
0x2098	0x0012      	RETURN      0
; end of _Keypad_Key_Press
_Keypad_Init:
;__Lib_Keypad4x4.c,34 :: 		
;__Lib_Keypad4x4.c,35 :: 		
0x209A	0x0E12      	MOVLW       18
0x209C	0x6E00      	MOVWF       R0 
0x209E	0x0E00      	MOVLW       0
0x20A0	0x6E01      	MOVWF       R1 
0x20A2	0x0E81      	MOVLW       keypadPort
0x20A4	0x2400      	ADDWF       R0, 0 
0x20A6	0x6EE1      	MOVWF       FSR1L 
0x20A8	0x0E0F      	MOVLW       hi_addr(keypadPort)
0x20AA	0x2001      	ADDWFC      R1, 0 
0x20AC	0x6EE2      	MOVWF       FSR1L+1 
0x20AE	0x0EFF      	MOVLW       255
0x20B0	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Keypad4x4.c,36 :: 		
L_end_Keypad_Init:
0x20B2	0x0012      	RETURN      0
; end of _Keypad_Init
_getKey:
;Keypad.c,31 :: 		char getKey (void)           //Función tipo char que posee todos los casos posibles
;Keypad.c,33 :: 		char kp = 0;               //Se inicializa la variable local kp como 0
0x20B4	0x6A16      	CLRF        getKey_kp_L0 
;Keypad.c,34 :: 		kp = Keypad_Key_Press();   //Se instancia el método que lee la tecla y la aloja en kp
0x20B6	0xDFBD      	RCALL       _Keypad_Key_Press
0x20B8	0xF016C000  	MOVFF       R0, getKey_kp_L0
;Keypad.c,35 :: 		switch (kp)                //Se instancia y ejecuta un ciclo case con lo guardado en kp
0x20BC	0xD032      	BRA         L_getKey0
;Keypad.c,37 :: 		case 1:
L_getKey2:
;Keypad.c,38 :: 		return '1';          //1 usando código ASCII - 49
0x20BE	0x0E31      	MOVLW       49
0x20C0	0x6E00      	MOVWF       R0 
0x20C2	0xD060      	BRA         L_end_getKey
;Keypad.c,39 :: 		case 2:
L_getKey3:
;Keypad.c,40 :: 		return '2';          //2 usando código ASCII - 50
0x20C4	0x0E32      	MOVLW       50
0x20C6	0x6E00      	MOVWF       R0 
0x20C8	0xD05D      	BRA         L_end_getKey
;Keypad.c,41 :: 		case 3:
L_getKey4:
;Keypad.c,42 :: 		return '3';          //3 usando código ASCII - 51
0x20CA	0x0E33      	MOVLW       51
0x20CC	0x6E00      	MOVWF       R0 
0x20CE	0xD05A      	BRA         L_end_getKey
;Keypad.c,43 :: 		case 4:
L_getKey5:
;Keypad.c,44 :: 		return 'A';          //A usando código ASCII - 65
0x20D0	0x0E41      	MOVLW       65
0x20D2	0x6E00      	MOVWF       R0 
0x20D4	0xD057      	BRA         L_end_getKey
;Keypad.c,45 :: 		case 5:
L_getKey6:
;Keypad.c,46 :: 		return '4';          //4 usando código ASCII - 52
0x20D6	0x0E34      	MOVLW       52
0x20D8	0x6E00      	MOVWF       R0 
0x20DA	0xD054      	BRA         L_end_getKey
;Keypad.c,47 :: 		case 6:
L_getKey7:
;Keypad.c,48 :: 		return '5';          //5 usando código ASCII - 53
0x20DC	0x0E35      	MOVLW       53
0x20DE	0x6E00      	MOVWF       R0 
0x20E0	0xD051      	BRA         L_end_getKey
;Keypad.c,49 :: 		case 7:
L_getKey8:
;Keypad.c,50 :: 		return '6';          //6 usando código ASCII - 54
0x20E2	0x0E36      	MOVLW       54
0x20E4	0x6E00      	MOVWF       R0 
0x20E6	0xD04E      	BRA         L_end_getKey
;Keypad.c,51 :: 		case 8:
L_getKey9:
;Keypad.c,52 :: 		return 'B';          //B usando código ASCII - 66
0x20E8	0x0E42      	MOVLW       66
0x20EA	0x6E00      	MOVWF       R0 
0x20EC	0xD04B      	BRA         L_end_getKey
;Keypad.c,53 :: 		case 9:
L_getKey10:
;Keypad.c,54 :: 		return '7';          //7 usando código ASCII - 55
0x20EE	0x0E37      	MOVLW       55
0x20F0	0x6E00      	MOVWF       R0 
0x20F2	0xD048      	BRA         L_end_getKey
;Keypad.c,55 :: 		case 10:
L_getKey11:
;Keypad.c,56 :: 		return '8';          //8 usando código ASCII - 56
0x20F4	0x0E38      	MOVLW       56
0x20F6	0x6E00      	MOVWF       R0 
0x20F8	0xD045      	BRA         L_end_getKey
;Keypad.c,57 :: 		case 11:
L_getKey12:
;Keypad.c,58 :: 		return '9';          //9 usando código ASCII - 57
0x20FA	0x0E39      	MOVLW       57
0x20FC	0x6E00      	MOVWF       R0 
0x20FE	0xD042      	BRA         L_end_getKey
;Keypad.c,59 :: 		case 12:
L_getKey13:
;Keypad.c,60 :: 		return 'C';          //C usando código ASCII - 67
0x2100	0x0E43      	MOVLW       67
0x2102	0x6E00      	MOVWF       R0 
0x2104	0xD03F      	BRA         L_end_getKey
;Keypad.c,61 :: 		case 13:
L_getKey14:
;Keypad.c,62 :: 		return '*';          //* usando código ASCII - 42
0x2106	0x0E2A      	MOVLW       42
0x2108	0x6E00      	MOVWF       R0 
0x210A	0xD03C      	BRA         L_end_getKey
;Keypad.c,63 :: 		case 14:
L_getKey15:
;Keypad.c,64 :: 		return '0';          //0 usando código ASCII - 48
0x210C	0x0E30      	MOVLW       48
0x210E	0x6E00      	MOVWF       R0 
0x2110	0xD039      	BRA         L_end_getKey
;Keypad.c,65 :: 		case 15:
L_getKey16:
;Keypad.c,66 :: 		return '#';          //# usando código ASCII - 35
0x2112	0x0E23      	MOVLW       35
0x2114	0x6E00      	MOVWF       R0 
0x2116	0xD036      	BRA         L_end_getKey
;Keypad.c,67 :: 		case 16:
L_getKey17:
;Keypad.c,68 :: 		return 'D';          //D usando código ASCII - 68
0x2118	0x0E44      	MOVLW       68
0x211A	0x6E00      	MOVWF       R0 
0x211C	0xD033      	BRA         L_end_getKey
;Keypad.c,69 :: 		default:
L_getKey18:
;Keypad.c,70 :: 		return 0;            //Si no coincide un caso, regresa a cero, vuelve a empezar el case
0x211E	0x6A00      	CLRF        R0 
0x2120	0xD031      	BRA         L_end_getKey
;Keypad.c,71 :: 		}
L_getKey0:
0x2122	0x5016      	MOVF        getKey_kp_L0, 0 
0x2124	0x0A01      	XORLW       1
0x2126	0xE0CB      	BZ          L_getKey2
0x2128	0x5016      	MOVF        getKey_kp_L0, 0 
0x212A	0x0A02      	XORLW       2
0x212C	0xE0CB      	BZ          L_getKey3
0x212E	0x5016      	MOVF        getKey_kp_L0, 0 
0x2130	0x0A03      	XORLW       3
0x2132	0xE0CB      	BZ          L_getKey4
0x2134	0x5016      	MOVF        getKey_kp_L0, 0 
0x2136	0x0A04      	XORLW       4
0x2138	0xE0CB      	BZ          L_getKey5
0x213A	0x5016      	MOVF        getKey_kp_L0, 0 
0x213C	0x0A05      	XORLW       5
0x213E	0xE0CB      	BZ          L_getKey6
0x2140	0x5016      	MOVF        getKey_kp_L0, 0 
0x2142	0x0A06      	XORLW       6
0x2144	0xE0CB      	BZ          L_getKey7
0x2146	0x5016      	MOVF        getKey_kp_L0, 0 
0x2148	0x0A07      	XORLW       7
0x214A	0xE0CB      	BZ          L_getKey8
0x214C	0x5016      	MOVF        getKey_kp_L0, 0 
0x214E	0x0A08      	XORLW       8
0x2150	0xE0CB      	BZ          L_getKey9
0x2152	0x5016      	MOVF        getKey_kp_L0, 0 
0x2154	0x0A09      	XORLW       9
0x2156	0xE0CB      	BZ          L_getKey10
0x2158	0x5016      	MOVF        getKey_kp_L0, 0 
0x215A	0x0A0A      	XORLW       10
0x215C	0xE0CB      	BZ          L_getKey11
0x215E	0x5016      	MOVF        getKey_kp_L0, 0 
0x2160	0x0A0B      	XORLW       11
0x2162	0xE0CB      	BZ          L_getKey12
0x2164	0x5016      	MOVF        getKey_kp_L0, 0 
0x2166	0x0A0C      	XORLW       12
0x2168	0xE0CB      	BZ          L_getKey13
0x216A	0x5016      	MOVF        getKey_kp_L0, 0 
0x216C	0x0A0D      	XORLW       13
0x216E	0xE0CB      	BZ          L_getKey14
0x2170	0x5016      	MOVF        getKey_kp_L0, 0 
0x2172	0x0A0E      	XORLW       14
0x2174	0xE0CB      	BZ          L_getKey15
0x2176	0x5016      	MOVF        getKey_kp_L0, 0 
0x2178	0x0A0F      	XORLW       15
0x217A	0xE0CB      	BZ          L_getKey16
0x217C	0x5016      	MOVF        getKey_kp_L0, 0 
0x217E	0x0A10      	XORLW       16
0x2180	0xE0CB      	BZ          L_getKey17
0x2182	0xD7CD      	BRA         L_getKey18
;Keypad.c,72 :: 		}
L_end_getKey:
0x2184	0x0012      	RETURN      0
; end of _getKey
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x2000      [36]    _main
0x2024      [14]    _Delay_1us
0x2032     [104]    _Keypad_Key_Press
0x209A      [26]    _Keypad_Init
0x20B4     [210]    _getKey
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _key
0x0016       [1]    getKey_kp_L0
0x0017       [1]    Keypad_Key_Press_rslt_L0
0x0018       [1]    Keypad_Key_Press_kdata_L0
0x0019       [1]    Keypad_Key_Press_loc_L0
0x001A       [1]    Keypad_Key_Press_rowcnt_L0
0x001B       [1]    Keypad_Key_Press_shifter_L0
0x0F81       [1]    keypadPort
0x0F81       [1]    PORTB
0x0F89       [0]    LATA4_bit
0x0F89       [0]    LATA1_bit
0x0F92       [0]    TRISA1_bit
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
